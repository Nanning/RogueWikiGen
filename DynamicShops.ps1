###FUNCTIONS
#data chopper function
    #args: delimiter, position, input, backup position
function datachop {
    $array = @($args[2] -split "$($args[0])")
    if (($array.Count -le $args[1]) -and (-not !$args[3])) {
        return $array[$args[3]]
    }
    else {
        return $array[$args[1]]
    }
}

function Sort-STNumerical {
    [CmdletBinding()]
    Param(
        [Parameter(
            Mandatory = $True,
            ValueFromPipeline = $True,
            ValueFromPipelineByPropertyName = $True)]
        [System.Object[]]
        $InputObject,
        
        [ValidateRange(2, 100)]
        [Byte]
        $MaximumDigitCount = 100,

        [Switch]$Descending
    )
    
    Begin {
        [System.Object[]] $InnerInputObject = @()
        
        [Bool] $SortDescending = $False
        if ($Descending) {
            $SortDescending = $True
        }
    }
    
    Process {
        $InnerInputObject += $InputObject
    }

    End {
        $InnerInputObject |
            Sort-Object -Property `
                @{ Expression = {
                    [Regex]::Replace($_, '(\d+)', {
                        "{0:D$MaximumDigitCount}" -f [Int64] $Args[0].Value })
                    }
                },
                @{ Expression = { $_ } } -Descending:$SortDescending
    }
}

Function IIf($If, $IfTrue, $IfFalse) {
    If ($If) {If ($IfTrue -is "ScriptBlock") {&$IfTrue} Else {$IfTrue}}
    Else {If ($IfFalse -is "ScriptBlock") {&$IfFalse} Else {$IfFalse}}
}

Write-Host @"




































DynamicShops
"@


#SET CONSTANTS
###
#RogueTech Dir (Where RTLauncher exists)
$RTroot = "D:\\RogueTech"
#Script Root
$RTScriptroot = "D:\\RogueTech\\WikiGenerators"
cd $RTScriptroot
#cache path
$CacheRoot = "$RTroot\\RtlCache\\RtCache"
$RTVersion = $(Get-Content "$CacheRoot\\RogueTech Core\\mod.json" -raw | ConvertFrom-Json).Version

#FactionFriendlyHash
$FactionFriendlyHash = @{}
foreach ($FactionFile in $(Get-ChildItem $CacheRoot -Recurse -Filter "faction_*.json").FullName) {
    $FactionJSON = Get-Content -Raw $FactionFile | ConvertFrom-Json
    $FactionFriendlyHash.Add($($FactionJSON.ID -split 'faction_')[1],$FactionJSON.Name)
}

#Load StratOps mod.json
$DynShops = Get-Content $CacheRoot\\DynamicShops\\mod.json -Raw | ConvertFrom-Json
$FactionLayout = $DynShops.Settings.GenericFactions

#Load Stars
$StarFile = $RTScriptroot+"\\Outputs\\StarTable.json"
$StarObjectList = Get-Content -Raw $StarFile | ConvertFrom-Json

#Init IDLinkHash
$IDLinkHash = @{}

#Load Gear to IDLinkHash
$GearFile = $RTScriptroot+"\\Outputs\\GearTable.json"
$GearObjectList = Get-Content -Raw $GearFile | ConvertFrom-Json
$GearObjectList | ? {$_.Description.UIName -ne ''} | foreach { $IDLinkHash[$($_.Description.ID)] = "Gear/$($_.Description.UIName)" }

#Load SShops
$SShopsDefList = Get-ChildItem $CacheRoot\\DynamicShops\\sshops -Recurse -Filter "*.json"
$SShopsDef = @()
foreach ($SShopsDefFile in $SShopsDefList.FullName) {
    $SShopsDef += Get-Content $SShopsDefFile -Raw | ConvertFrom-Json
}


$TheText = "{{-start-}}`r`n@@@Mods/DynamicShops@@@`r`n"
$TheText += @"
Last Updated: $RTVersion

[This page is generated by script from live game data. Changes will not stick and errors must be reported via ticket on [https://discord.gg/roguetech Discord] for a permanent fix.]

Mod Author: Denadan
Content: Raza5 + RT Contributors

__TOC__

= How Dynamic Shops Work = 
Dynamic Shops are generated through a combination of lists, similar to how starts are generated. A system's shop spawn pool is generated depending on the system's conditions:
* System Population
* #Owner Faction - The system's current owner
* [[#Owner Faction Group]] - The group which the system's current owner belongs to
* Player Faction Rep
* System Tags

Additionally, OFFLINE faction shops also generate loot based on their respective tables and contain extra special gear. 

== Owner Faction Group == 

{| class="wikitable" style="text-align: left;"
! Group !! Members

"@

#Faction Group table
foreach ($FactionGroup in $($FactionLayout | sort name)) {
    $TheText += @"
|-
| $($FactionGroup.Name)
|

"@
    foreach ($FactionMember in $FactionGroup.Members) {
        $TheText += "* $FactionMember`r`n"
    }
}


$TheText += @"
|}

= System Shop Tables =

{| class="wikitable" style="text-align: left;"
! Group !! Members

"@
