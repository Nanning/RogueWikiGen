###FUNCTIONS
#data chopper function
    #args: delimiter, position, input, backup position
function datachop {
    $array = @($args[2] -split "$($args[0])")
    if (($array.Count -le $args[1]) -and (-not !$args[3])) {
        return $array[$args[3]]
    }
    else {
        return $array[$args[1]]
    }
}

function Sort-STNumerical {
    [CmdletBinding()]
    Param(
        [Parameter(
            Mandatory = $True,
            ValueFromPipeline = $True,
            ValueFromPipelineByPropertyName = $True)]
        [System.Object[]]
        $InputObject,
        
        [ValidateRange(2, 100)]
        [Byte]
        $MaximumDigitCount = 100,

        [Switch]$Descending
    )
    
    Begin {
        [System.Object[]] $InnerInputObject = @()
        
        [Bool] $SortDescending = $False
        if ($Descending) {
            $SortDescending = $True
        }
    }
    
    Process {
        $InnerInputObject += $InputObject
    }

    End {
        $InnerInputObject |
            Sort-Object -Property `
                @{ Expression = {
                    [Regex]::Replace($_, '(\d+)', {
                        "{0:D$MaximumDigitCount}" -f [Int64] $Args[0].Value })
                    }
                },
                @{ Expression = { $_ } } -Descending:$SortDescending
    }
}

Function IIf($If, $IfTrue, $IfFalse) {
    If ($If) {If ($IfTrue -is "ScriptBlock") {&$IfTrue} Else {$IfTrue}}
    Else {If ($IfFalse -is "ScriptBlock") {&$IfFalse} Else {$IfFalse}}
}

Write-Host @"




































BASpawnPools
"@


#SET CONSTANTS
###
#RogueTech Dir (Where RTLauncher exists)
$RTroot = "D:\\RogueTech"
#Script Root
$RTScriptroot = "D:\\RogueTech\\WikiGenerators"
cd $RTScriptroot
#cache path
$CacheRoot = "$RTroot\\RtlCache\\RtCache"

#Load StratOps mod.json
$StratOps = Get-Content $CacheRoot\\StrategicOperations\\mod.json -Raw | ConvertFrom-Json

#FactionFriendlyHash
$FactionFriendlyHash = @{}
foreach ($FactionFile in $(Get-ChildItem $CacheRoot -Recurse -Filter "faction_*.json").FullName) {
    $FactionJSON = Get-Content -Raw $FactionFile | ConvertFrom-Json
    $FactionFriendlyHash.Add($($FactionJSON.ID -split 'faction_')[1],$FactionJSON.Name)
}


#The MegaHash for friendlyname
$DefLinkNameHash = @{}
$Mechs = Get-Content $RTScriptroot\\Outputs\\MechListTable.json -raw | ConvertFrom-Json
$Tanks = Get-Content $RTScriptroot\\Outputs\\TankListTable.json -raw | ConvertFrom-Json
$Gears = Get-Content $RTScriptroot\\Outputs\\GearTable.json -raw | ConvertFrom-Json
$Mechs | select @{Name = 'DefName'; Expression = {if (!$_.MechDefFile) {"$($_.Description.ID)"} else {"$($($_.MechDefFile -split '\\')[-1].Split('.')[0])"}}}, @{Name = 'LinkName'; Expression = {if (!$_.Name.LinkName) {$_.Description.UIName} else {$_.Name.LinkName}}} | % {if (!$($DefLinkNameHash.$($_.DefName))) {$DefLinkNameHash.Add($_.DefName, $_.LinkName)}}
$Tanks | select @{Name = 'DefName'; Expression = {if (!$_.MechDefFile) {"$($_.Description.ID)"} else {"$($($_.MechDefFile -split '\\')[-1].Split('.')[0])"}}}, @{Name = 'LinkName'; Expression = {if (!$_.Name.LinkName) {$_.Description.UIName} else {$_.Name.LinkName}}} | % {if (!$($DefLinkNameHash.$($_.DefName))) {$DefLinkNameHash.Add($_.DefName, $_.LinkName)}}
$Gears | select @{Name = 'DefName'; Expression = {if (!$_.MechDefFile) {"$($_.Description.ID)"} else {"$($($_.MechDefFile -split '\\')[-1].Split('.')[0])"}}}, @{Name = 'LinkName'; Expression = {if (!$_.Name.LinkName) {$_.Description.UIName} else {$_.Name.LinkName}}} | % {if (!$($DefLinkNameHash.$($_.DefName))) {$DefLinkNameHash.Add($_.DefName, $_.LinkName)}}

$RTVersion = $(Get-Content "$CacheRoot\\RogueTech Core\\mod.json" -raw | ConvertFrom-Json).Version
$TheText = "{{-start-}}`r`n@@@BattleArmor Spawn Pools@@@`r`n"
$TheText += @"
Last Updated: $RTVersion

[This page is generated by script from live game data. Changes will not stick and errors must be reported via ticket on [https://discord.gg/roguetech Discord] for a permanent fix.]

 - Major Battle Armor rework to bring them closer to TT values, you will need to store/ready all BAs for them to function properly. You also need to store/ready every vehicle you have that say it has BA bays in description.
 - Battle Armors now can mount friendly units and swarm enemies. Complete explanation can be read here https://github.com/ajkroeg/StrategicOperations
 -- Use Mount ability targeting friendly unit to mount. To dismount use Mount ability targeting the unit BA is attached to. Any BA can mount vehicles with BA bays (this is noted in vehicle description). Most BA can mount Omnimechs. Some BA can mount any friendly unit except VTOLs and LAMs.
 -- Use Mount ability targeting enemy unit to swarm. If swarm is successful BA will attach to target and fire all its enabled weapons at absolute accuracy and with 20% damage bonus. On the following turn use "Done" button to continue swarming, or Mount ability targeting swarmed unit to dismount. VTOLs and LAMs can't be swarmed.
 -- BAs attached externally to a unit regardless friendly or hostile has 33% chance to be hit by shots hitting location BA is attached to.
 -- You can use Swat and Roll (self knockdown) abilities to try to get rid of swarming BAs.
 - Battle Armors can no longer run (have run speed equal to walk speed) or perform DFA (DFA on BAs was always a proxy for swarm)
 - AI units have a chance to spawn with BA attached to them. Chance and maximum number of BAs that can spawn is faction dependent and raise with difficulty.

 Pool Types:
 Internal - BA Pod is inside the unit. Think APC carrying troops.
 Mounted - BA are riding the unit or holding on using mounting locations. Think riding a roller coaster.
 Handsy - BA are holding on to the unit for dear life. Think bug on a car's windscreen. 

Below are tables of faction spawn pools and chances

__TOC__

= The Tables =

"@


#The Factions Section
$FactionsList = $StratOps.Settings.BattleArmorFactionAssociations.FactionIDs | sort

foreach ($Faction in $FactionsList) {
    $FactionStats = $StratOps.Settings.BattleArmorFactionAssociations | ? {$_.FactionIDs -contains $Faction}
    if ($FactionFriendlyHash.$($Faction)) {
        $FactionName = $FactionFriendlyHash.$($Faction)
    } else {
        $FactionName = $Faction
    }


    $TheText += @"
`r`n

== $FactionName ==

{| class="wikitable" style="text-align: left;"
! colspan="2" | Faction BA Stats
|-
! Spawn Chance Base Modifier
| $($FactionStats.SpawnChanceBase)
|-
! Spawn Chance Difficulty Modifier
| $($FactionStats.SpawnChanceDiffMod)
|-
! Max squads per contract
| $($FactionStats.MaxSquadsPerContract)
|}

{| class="wikitable mw-collapsible mw-collapsed" style="text-align: left;"
! colspan = "4" | Difficulty Spawn Chance Table
|-
! Difficulty !! Internal !! Mounted !! Handsy
"@
    $DiffList = @(0..40)
    $MountedEmptyMod = 0
    $FactionStats.MountedBattleArmorWeight.psobject.Properties.value | % {$MountedEmptyMod += $_}
    $MountedEmptyMod = [Decimal]($($FactionStats.MountedBattleArmorWeight.psobject.Properties | ? {$_.Name -eq 'BA_EMPTY'}).Value / $MountedEmptyMod)
    $HandsyEmptyMod = 0
    $FactionStats.HandsyBattleArmorWeight.psobject.Properties.value | % {$HandsyEmptyMod += $_}
    $HandsyEmptyMod = [Decimal]($($FactionStats.HandsyBattleArmorWeight.psobject.Properties | ? {$_.Name -eq 'BA_EMPTY'}).Value / $HandsyEmptyMod)
    foreach ($Diff in $DiffList) {
        $DiffMath = ([math]::Max([Decimal]0,$(($($FactionStats.SpawnChanceBase) + ($Diff * $($FactionStats.SpawnChanceDiffMod))))) * 100)
        $TheText += "`r`n|-`r`n! $Diff`r`n| $([math]::Round($DiffMath))%`r`n| $([math]::Round($DiffMath * (1 - $MountedEmptyMod)))%`r`n| $([math]::Round($DiffMath * (1 - $HandsyEmptyMod)))%"
    }
    $TheText += @"
`r`n|}

{| class="wikitable mw-collapsible mw-collapsed" style="text-align: left;"
! colspan = "2" | Internal Spawn Table
|-
! Unit !! Weight
"@
    $SpawnTable = @()
    $FactionStats.InternalBattleArmorWeight.psobject.Properties | % {$SpawnTable += "| [[$(IIf {$_.Name -match 'mechdef_'} {"Mechs/"} {"Vehicles/"})$(IIf $($DefLinkNameHash.$($_.Name)) {$($DefLinkNameHash.$($_.Name))} {$_.Name})]] || $($_.Value)"}
    $SpawnTable = @($SpawnTable) -notmatch "BA_EMPTY" | Sort-STNumerical
    $SpawnTable | % {$TheText += "`r`n|-`r`n$($_)"}
    $TheText += @"
`r`n|}

{| class="wikitable mw-collapsible mw-collapsed" style="text-align: left;"
! colspan = "2" | Mounted Spawn Table
|-
! Unit !! Weight
"@
    $SpawnTable = @()
    $FactionStats.MountedBattleArmorWeight.psobject.Properties | % {$SpawnTable += "| [[$(IIf {$_.Name -match 'mechdef_'} {"Mechs/"} {"Vehicles/"})$(IIf $($DefLinkNameHash.$($_.Name)) {$($DefLinkNameHash.$($_.Name))} {$_.Name})]] || $($_.Value)"}
    $SpawnTable = @($SpawnTable) -notmatch "BA_EMPTY" | Sort-STNumerical
    $SpawnTable | % {$TheText += "`r`n|-`r`n$($_)"}
    $TheText += @"
`r`n|}

{| class="wikitable mw-collapsible mw-collapsed" style="text-align: left;"
! colspan = "2" | Handsy Spawn Table
|-
! Unit !! Weight
"@
    $SpawnTable = @()
    $FactionStats.HandsyBattleArmorWeight.psobject.Properties | % {$SpawnTable += "| [[$(IIf {$_.Name -match 'mechdef_'} {"Mechs/"} {"Vehicles/"})$(IIf $($DefLinkNameHash.$($_.Name)) {$($DefLinkNameHash.$($_.Name))} {$_.Name})]] || $($_.Value)"}
    $SpawnTable = @($SpawnTable) -notmatch "BA_EMPTY" | Sort-STNumerical
    $SpawnTable | % {$TheText += "`r`n|-`r`n$($_)"}
    $TheText += "`r`n|}`r`n`r`n"
}



#PYWrapper
$TheText += "`r`n{{-stop-}}"
$OutFile = "D:\\RogueTech\\WikiGenerators\\Outputs\\BASpawnPools.UTF8"
$TheText | Set-Content -Encoding UTF8 $OutFile

$PWBRoot = "D:\\PYWikiBot"
$titlestartend = "@@@"
py $PWBRoot\\pwb.py pagefromfile -file:$OutFile -notitle -force -pt:0 -titlestart:$titlestartend -titleend:$titlestartend
